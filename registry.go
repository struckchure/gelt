package gelt

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
)

type Registry struct {
	rootPath     string
	registryPath string
	modulePath   string
}

func (r *Registry) Generate() error {
	f := jen.NewFile("main")

	// Add package main
	// add DO NOT EDIT
	f.PackageComment("// Code generated by Gelt; DO NOT EDIT.")

	// Scan directory and collect page mappings
	pageRegistry := make(map[string]string)

	err := filepath.Walk(JoinURL(r.rootPath, "routes"), func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Skip directories
		if info.IsDir() {
			return nil
		}

		// Only process Go files
		if !strings.HasSuffix(info.Name(), ".go") {
			return nil
		}

		packageName, err := GetPackageName(path)
		if err != nil {
			return nil
		}

		importPath := fmt.Sprintf("%s/%s", r.modulePath, path)

		pageRegistry[packageName] = importPath
		return nil
	})

	if err != nil {
		return err
	}

	// Generate PageRegistry map
	registryMap := jen.Dict{}
	for alias, importPath := range pageRegistry {
		relPath, err := filepath.Rel(r.rootPath, filepath.Dir(importPath))
		if err != nil {
			return err
		}
		registryMap[jen.Lit(alias)] = jen.Qual(relPath, "Page").Values()
	}

	f.Var().Id("PageRegistry").Op("=").Map(jen.String()).Any().Values(registryMap)

	// Write to file
	file, err := os.Create(r.registryPath)
	if err != nil {
		return err
	}
	defer file.Close()

	err = f.Render(file)
	if err != nil {
		return err
	}

	log.Println("Page registry generated successfully!")

	return nil
}

func NewRegistry(rootPath string, registryPath string, modulePath string) *Registry {
	return &Registry{
		rootPath:     rootPath,
		registryPath: registryPath,
		modulePath:   modulePath,
	}
}
